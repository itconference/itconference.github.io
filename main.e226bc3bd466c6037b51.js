!function(e){var n={};function r(o){if(n[o])return n[o].exports;var i=n[o]={i:o,l:!1,exports:{}};return e[o].call(i.exports,i,i.exports,r),i.l=!0,i.exports}r.m=e,r.c=n,r.d=function(e,n,o){r.o(e,n)||Object.defineProperty(e,n,{configurable:!1,enumerable:!0,get:o})},r.r=function(e){Object.defineProperty(e,"__esModule",{value:!0})},r.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(n,"a",n),n},r.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},r.p="/",r(r.s=0)}([function(e,n){e.exports="var _require = require('fs'),\n    readFileSync = _require.readFileSync,\n    writeFileSync = _require.writeFileSync;\n\nvar _require2 = require('pug'),\n    renderFile = _require2.renderFile;\n\nvar _require3 = require('path'),\n    resolve = _require3.resolve;\n\nvar _require4 = require('js-yaml'),\n    load = _require4.load;\n\nvar encoding = 'utf-8';\nvar dayjs = require('dayjs');\nvar rimraf = require('rimraf');\nvar conferencesYaml = resolve(__dirname, '../conferences.yaml');\n\nvar _load = load(readFileSync(conferencesYaml, { encoding: encoding })),\n    conferences = _load.conferences;\n\nvar confs = conferences.filter(function (_ref) {\n  var tags = _ref.tags;\n  return tags.includes('Full-stack');\n}).filter(function (_ref2) {\n  var scheduled = _ref2.scheduled;\n  return !!scheduled;\n});\n\nvar html = renderFile(resolve(__dirname, './github.pug'), {\n  conferences: confs,\n  year: dayjs().year()\n});\n\nvar _process$env = process.env,\n    GH_UNI_USER = _process$env.GH_UNI_USER,\n    GH_UNI_PW = _process$env.GH_UNI_PW;\n\nvar REPO = 'the-best-developer-conferences';\nvar remote = 'https://' + GH_UNI_USER + ':' + GH_UNI_PW + '@github.com/unicorncoding/' + REPO;\nvar local = 'cloned/' + REPO;\n\nrimraf.sync(local);\nprocess.on('unhandledRejection', function (up) {\n  throw up;\n});\nrequire('simple-git')().silent(true).clone(remote, local).then(function () {\n  return updateAndPushReadme(html, local);\n});\n\nfunction updateAndPushReadme(body, repo) {\n  writeFileSync(repo + '/README.md', body);\n  return new Promise(function (resolve, reject) {\n    require('simple-git')(repo).silent(true).addConfig('user.name', 'unicorncoding').addConfig('user.email', 'co.unicorn.ding@gmail.com').commit('update conference list ' + dayjs(), 'README.md').push('origin', 'master', function (err, ok) {\n      if (err) {\n        reject(err);\n      } else {\n        resolve(ok);\n      }\n    });\n  });\n}"}]);